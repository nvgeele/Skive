(begin
  (define (matrix-column m c)
    (map-vector (lambda (i r)
                  (vector-ref r c))
                m))

  (define (sum-scalar v1 v2)
    (letrec ((iter
              (lambda (i s v c)
                (if (= i s)
                    c
                    (iter (+ 1 i)
                          s
                          v
                          (+ c (vector-ref v i)))))))
      (iter 0
            (vector-length v1)
            (map-vector (lambda (i ignore)
                          (* (vector-ref v1 i)
                             (vector-ref v2 i)))
                        (make-vector (vector-length v1) 0))
            0)))

  (define (mat-mult m1 m2)
    (let ((new (make-vector (vector-length m1)
                            (make-vector (vector-length (vector-ref m2 0)) 0))))
      (map-vector
       (lambda (ir row)
         (map-vector (lambda (ik ignore)
                       (let ((column (matrix-column m2 ik))
                             (row (vector-ref m1 ir)))
                         (sum-scalar column row)))
                     row))
       new)))

  (let ((v1 (vector (vector 1 2 3)
                    (vector 4 5 6)
                    (vector 7 8 9)))
        (v2 (vector (vector 1)
                    (vector 1)
                    (vector 1))))
    (mat-mult v1 v2)))
